<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:customControls="clr-namespace:IfcXplorer.CustomControls">

    <SolidColorBrush x:Key="DarkGrey" Color="#2B2B2B" />
    <SolidColorBrush x:Key="Turquoise" Color="#26A69A" />
    <SolidColorBrush x:Key="TurquoiseHighlight" Color="#FF2CCBBC" />
    <SolidColorBrush x:Key="LightPanelsBackground" Color="#FAFAFA" />
    <SolidColorBrush x:Key="LightBackground" Color="#FAFAFA" />
    <SolidColorBrush x:Key="LightText" Color="#F1F1F1" />
    <SolidColorBrush x:Key="DarkText" Color="#2B2B2B" />
    <SolidColorBrush x:Key="LightTextReader" Color="#FFA2A2A2" />
    <SolidColorBrush x:Key="BorderLight" Color="#E8E8E8" />
    <SolidColorBrush x:Key="BorderDark" Color="#FF3E3E3E" />

    <SolidColorBrush x:Key="DarkPanelsBackground" Color="#2D2D2D" />
    <SolidColorBrush x:Key="DarkBackground" Color="#1E1E1E" />

    <SolidColorBrush x:Key="HighlightColor" Color="#20000000" />



    <Style x:Key="MenuButton" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Padding" Value="20,2,5,2"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource HighlightColor}" />
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Turquoise}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel x:Name="InnerPanel" Orientation="{Binding (customControls:IconButton.Orientation), RelativeSource={RelativeSource Mode=TemplatedParent}}" Background="{Binding Ba}" Margin="2">
                        <Label Content="{Binding (customControls:IconButton.IconChar), RelativeSource={RelativeSource Mode=TemplatedParent}}" FontFamily="{DynamicResource Sosa}" FontSize="22" Foreground="{TemplateBinding BorderBrush}"></Label>
                        <Label Content="{TemplateBinding Content}" Margin="0,5" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerPanel" Property="Background" Value="{StaticResource HighlightColor}"/>
                            <Setter TargetName="InnerPanel" Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}" >
                    <StackPanel x:Name="InnerPanel" Orientation="{Binding (customControls:IconButton.Orientation), RelativeSource={RelativeSource Mode=TemplatedParent}}" Background="Transparent" Margin="2">
                        <Label Content="{Binding (customControls:IconToggleButton.ToggleIconChar), RelativeSource={RelativeSource Mode=TemplatedParent}}" FontFamily="{DynamicResource Sosa}" FontSize="22" Foreground="{TemplateBinding BorderBrush}"></Label>
                        <Label x:Name="ToggleButtonText"  Content="{TemplateBinding Content}" Margin="0,5" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                    </StackPanel> 
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerPanel" Property="Background" Value="{StaticResource HighlightColor}"/>
                            <Setter TargetName="InnerPanel" Property="Cursor" Value="Hand"></Setter>
                        </Trigger>


                        <Trigger Property="IsChecked" Value="True">
                            
                            <Setter TargetName="InnerPanel" Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalIconButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel x:Name="InnerPanel" Orientation="Vertical" Background="Transparent" Margin="2">
                        <Label Content="{Binding (customControls:IconButton.IconChar), RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalContentAlignment="Center" FontFamily="./Fonts/#Sosa" FontSize="50" Foreground="{TemplateBinding BorderBrush}">
                            <Label.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="3" Color="DarkSlateGray"/>
                            </Label.Effect>
                        </Label>
                        <Label Content="{TemplateBinding Content}" Margin="0,-5" Foreground="#FF191919" HorizontalContentAlignment="Center" Background="Transparent"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerPanel" Property="Background" Value="{StaticResource HighlightColor}"/>
                            <Setter TargetName="InnerPanel" Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="Form" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="Margin" Value="0,0,0,4" />
    </Style>
    <Style x:Key="FormLabel" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Width" Value="130" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="FormTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Padding" Value="5"></Setter>
    </Style>
    <Style x:Key="FormCheckBox" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Padding" Value="0,3" />
    </Style>
    <Style x:Key="FormRadioButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Padding" Value="0,3" />
    </Style>
    <Style TargetType="{x:Type Button}" >
        <!--<Style.BasedOn>
            <StaticResource ResourceKey="{x:Type Button}" />
        </Style.BasedOn>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock x:Name="ButtonLabel" 
                           Text="{TemplateBinding Content}"
                           Background="{StaticResource Turquoise}" 
                           Foreground="{StaticResource LightText}" 
                           Margin="0"
                           Padding="{TemplateBinding Padding}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonLabel" Property="Background" Value="{StaticResource TurquoiseHighlight}"/>
                            <Setter TargetName="ButtonLabel" Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>